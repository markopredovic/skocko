{"version":3,"sources":["utility.js","components/Skocko/GameCurrent.js","components/Skocko/PlaySkocko.js","components/Skocko/GameResult.js","components/Skocko/GameEnd.js","components/Skocko/Skocko.js","App.js","serviceWorker.js","index.js","components/Skocko/Skocko.module.css"],"names":["parseSign","a","gameCurrent","_ref","currentTable","game","map","runda","react_default","createElement","key","Math","round","random","PlaySkocko","state","currentCombination","disabled","addSignHandler","sign","updated","_this","_index","findIndex","el","isNull","disabledUpdated","setState","clearCombination","submitCombination","props","submitRound","resetState","_this2","this","onClick","isGameEnd","Component","gameResult","resultTable","result","gameEnd","is_success","newGame","Skocko","result_game","randomCombination","is_game_end","generateRandomCombination","customRandom","submitRoundHandler","combination","console","log","updateGameTable","updateResultTable","empty_round_finded","updatedGame","isEmptyRound","score","calculateScore","isGameSuccess","updatedResult","random_combination","Object","toConsumableArray","right_place","not_right_place","i","forEach","indexOf","push","className","Classes","lSkocko","GameEnd","lTop","lCurrentTable","GameCurrent","lResultTable","GameResult","lGameControls","Skocko_PlaySkocko","App","components_Skocko_Skocko","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.80e4aa86.chunk.js","sourcesContent":["export const parseSign = (a) => {\n    if(!a) {\n        return 0\n    } else {\n        return a\n    }\n}","import React from 'react';\nimport { parseSign } from '../../utility'\n\nconst gameCurrent = ({game}) => {\n\n    const currentTable = game.map(runda => {\n        return (\n            <div key={Math.round(Math.random() * 1000)}>\n                <span>{parseSign(runda[0])}</span>&nbsp;\n                <span>{parseSign(runda[1])}</span>&nbsp;\n                <span>{parseSign(runda[2])}</span>&nbsp;\n                <span>{parseSign(runda[3])}</span>&nbsp;\n            </div>\n        )\n    })\n\n    return (\n        <div>\n            {currentTable}\n        </div>\n    )\n}\n\nexport default gameCurrent","import React, { Component } from 'react';\nimport { isNull } from 'util';\n\nclass PlaySkocko extends Component {\n\n    state = {\n        currentCombination: [null, null, null, null],\n        disabled: false\n    }\n\n    addSignHandler = (sign) => {\n        let updated = this.state.currentCombination;\n\n        const _index = updated.findIndex(el => isNull(el))\n\n        updated[_index] = sign;\n\n        const disabledUpdated = !isNull(updated[0]) && !isNull(updated[1]) && !isNull(updated[2]) && !isNull(updated[3]);\n\n        this.setState({\n            currentCombination: updated,\n            disabled: disabledUpdated\n        })\n    }\n\n    clearCombination = () => {\n        this.setState({\n            currentCombination: [null, null, null, null],\n            disabled: false\n        })\n    }\n\n    submitCombination = () => {\n        this.props.submitRound(this.state.currentCombination);\n        this.resetState();\n    }\n\n    resetState = () => {\n        this.setState({\n            currentCombination: [null, null, null, null],\n            disabled: false\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    Your current combination: \n                    <span>{this.state.currentCombination[0]}</span>\n                    <span>{this.state.currentCombination[1]}</span>\n                    <span>{this.state.currentCombination[2]}</span>\n                    <span>{this.state.currentCombination[3]}</span>\n                </div>\n                <div>\n                    Choose Skocko Sign:\n                    <div>\n                        <button onClick={() => this.addSignHandler(1)} disabled={this.state.disabled || this.props.isGameEnd}>1</button>\n                        <button onClick={() => this.addSignHandler(2)} disabled={this.state.disabled || this.props.isGameEnd}>2</button>\n                        <button onClick={() => this.addSignHandler(3)} disabled={this.state.disabled || this.props.isGameEnd}>3</button>\n                        <button onClick={() => this.addSignHandler(4)} disabled={this.state.disabled || this.props.isGameEnd}>4</button>\n                        <button onClick={() => this.addSignHandler(5)} disabled={this.state.disabled || this.props.isGameEnd}>5</button>\n                        <button onClick={() => this.addSignHandler(6)} disabled={this.state.disabled || this.props.isGameEnd}>6</button>\n                    </div>\n                </div>\n                <div>\n                    Submit combination: <button onClick={this.submitCombination} disabled={!this.state.disabled  || this.props.isGameEnd}>Submit</button>\n                </div>\n                <div>\n                    Clear combination: <button onClick={this.clearCombination} disabled={ this.props.isGameEnd}>Clear</button>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default PlaySkocko","import React from 'react';\nimport { parseSign } from '../../utility'\n\nconst gameResult = ({result}) => {\n\n    const resultTable = result.map(runda => {\n        return (\n            <div key={Math.round(Math.random() * 1000)}>\n                <span>{parseSign(runda[0])}</span>&nbsp;\n                <span>{parseSign(runda[1])}</span>&nbsp;\n                <span>{parseSign(runda[2])}</span>&nbsp;\n                <span>{parseSign(runda[3])}</span>&nbsp;\n            </div>\n        )\n    })\n\n    return (\n        <div>\n            {resultTable}\n        </div>\n    )\n}\n\nexport default gameResult","import React from \"react\";\n\nconst gameEnd = (props) => {\n  return <div>\n      <p>Game end</p>\n      {props.is_success ? 'Congratulations!!!' : props.random}\n        <button onClick={() => props.newGame()}>new game</button>\n  </div>;\n};\n\nexport default gameEnd","import React, { Component } from 'react'\nimport Classes from './Skocko.module.css'\nimport GameCurrent from './GameCurrent'\nimport PlaySkocko from './PlaySkocko'\nimport GameResult from './GameResult'\nimport GameEnd from './GameEnd'\nimport { isNull } from 'util';\n\nclass Skocko extends Component {\n\n    state = {\n        game: [\n           [null, null, null, null],\n           [null, null, null, null],\n           [null, null, null, null],\n           [null, null, null, null],\n           [null, null, null, null],\n           [null, null, null, null]\n        ],\n        result_game: [\n            [null, null, null, null],\n            [null, null, null, null],\n            [null, null, null, null],\n            [null, null, null, null],\n            [null, null, null, null],\n            [null, null, null, null]\n         ],\n        randomCombination: [null, null, null, null],\n        is_game_end: false,\n        is_success: false\n    }\n\n\n    componentDidMount () {\n        console.log('Component did mount');\n        this.generateRandomCombination();\n    }\n\n    generateRandomCombination = () => {\n        const customRandom = [0, 1, 2, 3].map(() => Math.round(Math.random() * 5 + 1));\n\n        this.setState({randomCombination: customRandom})\n    }\n\n    submitRoundHandler = (combination) => {\n        console.log(combination);\n\n        this.updateGameTable(combination);\n        this.updateResultTable(combination);\n    }\n\n    updateGameTable = (combination) => {\n        console.log('update game table');\n\n        let empty_round_finded = false;\n        let is_game_end = false;\n\n        const updatedGame = this.state.game.map(round => {\n            if(this.isEmptyRound(round) && !empty_round_finded) {\n                empty_round_finded = true;\n                return combination;\n            } else {\n                return round\n            }\n        })\n\n        // if 6 atempt then game is ended\n        if(!isNull(updatedGame[5][0])) {\n            is_game_end = true;\n        }\n\n        console.log('is_game_end', is_game_end);\n\n        this.setState({game: updatedGame, is_game_end: is_game_end});\n    }\n\n    updateResultTable = (combination) => {\n        console.log('Update result table')\n\n        const score = this.calculateScore(combination);\n\n        const is_success = this.isGameSuccess(score);\n\n        let empty_round_finded = false;\n\n        const updatedResult = this.state.result_game.map(round => {\n            if(this.isEmptyRound(round) && !empty_round_finded) {\n                empty_round_finded = true;\n                return score;\n            } else {\n                return round\n            }\n        })\n\n        let is_game_end = !isNull(updatedResult[5][0]) || is_success;\n\n        this.setState({\n            result_game: updatedResult,\n            is_success,\n            is_game_end\n        });\n    }\n\n    isGameSuccess = (score) => {\n        return score[0] === 'DA' && score[1] === 'DA' && score[2] === 'DA' && score[3] === 'DA';\n    }\n\n    isEmptyRound = (round) => {\n        return isNull(round[0]);\n    }\n\n    calculateScore = (combination) => {\n\n        let random_combination = [...this.state.randomCombination];\n        let right_place = 0;\n        let not_right_place = 0;\n\n        let score = [];\n        \n\n        for(let i = 0; i <  4; i++) {\n            if(combination[i] === random_combination[i]) {\n                right_place++;\n            }\n        }\n\n        combination.forEach(el => {\n            const _index = random_combination.indexOf(el);\n\n            if( _index !== -1 && (combination[_index] !== random_combination[_index])) {\n                not_right_place++;\n                random_combination[_index] = 999;\n            }\n        });\n\n        for(let i = 0; i < right_place; i++) {\n            score.push('DA');\n        }\n\n        for(let i = 0; i < not_right_place; i++) {\n            score.push('NE');\n        }\n\n        for(let i = 0; i < 4 - (not_right_place + right_place); i++) {\n            score.push('EMPTY');\n        }\n\n        return score;\n \n    }\n\n    newGame = () => {\n        this.setState({\n            game: [\n                [null, null, null, null],\n                [null, null, null, null],\n                [null, null, null, null],\n                [null, null, null, null],\n                [null, null, null, null],\n                [null, null, null, null]\n             ],\n             result_game: [\n                 [null, null, null, null],\n                 [null, null, null, null],\n                 [null, null, null, null],\n                 [null, null, null, null],\n                 [null, null, null, null],\n                 [null, null, null, null]\n              ],\n             randomCombination: [null, null, null, null],\n             is_game_end: false,\n             is_success: false\n        })\n\n        this.generateRandomCombination();\n    }\n\n\n\n    render() {\n\n        return (\n            <div className={Classes.lSkocko}>\n                <div>\n                    {this.state.is_game_end && (<GameEnd newGame={this.newGame} is_success={this.state.is_success} random={this.state.randomCombination}/>)}\n                    </div>\n                <div className={Classes.lTop}>\n                    <div className={Classes.lCurrentTable}>\n                        <GameCurrent game={this.state.game} />\n                </div>\n                    <div className={Classes.lResultTable}>\n                        <GameResult result={this.state.result_game}/>\n                </div>\n                </div>\n                <div className={Classes.lGameControls}>\n                    <PlaySkocko submitRound={this.submitRoundHandler} isGameEnd={this.state.is_game_end}/>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Skocko","import React, {Component}  from \"react\";\nimport \"./App.css\";\nimport Skocko from './components/Skocko/Skocko'\n\n\nclass App extends Component {\n\n  state = {\n\n  } \n\n\n  render () {\n    return (\n      <div className=\"App\">\n        <h1>1. Github finder app - using github API</h1>\n        <h1>2. Skocko game</h1>\n\n        <Skocko />\n\n      </div>\n    );\n  }\n  \n  }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lSkocko\":\"Skocko_lSkocko__3LT0M\",\"lTop\":\"Skocko_lTop__3u91x\",\"lCurrentTable\":\"Skocko_lCurrentTable__2qgzB\",\"lResultTable\":\"Skocko_lResultTable__3GBIb\",\"lGameControls\":\"Skocko_lGameControls__TS5Wi\"};"],"sourceRoot":""}